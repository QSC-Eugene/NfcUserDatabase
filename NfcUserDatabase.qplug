PluginInfo = {
  Name = "NFC User Database",
  Author = "Eugene Dunn",
  BuildVersion = "0.0.2.9",
  Version = "0.0",
  Id = "b8a5f6f0-2064-4c3d-9dc6-8a5684b6c846",
  Description = ""
}
local Colors = {
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  Blue = {0, 0, 255},
  Gray = {136, 136, 136},
  LightGray = {51,51,51},
  PluginColor = {147,169,213}
}

local NumberOfLines = 20

-- Define the color of the plugin object in the design
function GetColor(props)
  return Colors.PluginColor
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return PluginInfo.Name .. "\rv" .. PluginInfo.BuildVersion
  -- return "Vaddio" .. props["Model"].Value .. " " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
PageNames = {"Users","UserModification","Interfaces"} --List the pages within the plugin
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(
    props,
    {
      Name = "Number Of Interfaces",
      Type = "integer",
      Value = 1,
      Min = 1,
      Max = 100,
    }
  )
  table.insert(
    props,
    {
      Name = "File Location",
      Type = "string",
      Value = "NfcTags.json",
    }
  )
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  -- table.insert(ctrls,{Name = "code",ControlType = "Text",PinStyle = "Input",Count = 1})
  
  local NumerOfInterfaces = props["Number Of Interfaces"].Value
  
  table.insert(
    ctrls,
    {
      Name = "LearningPanel",
      ControlType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "LearningMode",
      ControlType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "AccessLevel",
      ControlType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "UserName",
      ControlType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "UID",
      ControlType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  
  table.insert(
    ctrls,
    {
      Name = "BackupPin",
      ControlType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "Created",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "History",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = HistoryLength,
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 3,
      Max = 100,
      DefaultValue = 10,
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "RefreshList",
      ControlType = "Button",
      ButtonType = "Trigger",
      PinStyle = "Input", 
      UserPin = true,
      Icon = "Refresh",
      IconType = "Icon"
    }
  )
  table.insert(
    ctrls,
    {
      Name = "EnableListDelete",
      ControlType = "Button",
      ButtonType = "Toggle",
      PinStyle = "Both",
      UserPin = true,
      DefaultValue = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ListDelete",
      ControlType = "Button",
      ButtonType = "Trigger",
      PinStyle = "None",
      UserPin = false,
      Count = NumberOfLines,
      Icon = "X Circle",
      IconType = "Icon"
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ListScroll",
      ControlType = "Knob",
      ControlUnit = "Percent",
      Min = 0,
      Max = 100,
      DefaultValue = 100,
      PinStyle = "None",
      UserPin = false,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ListName",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "None",
      UserPin = false,
      Count = NumberOfLines,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ListUID",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "None",
      UserPin = false,
      Count = NumberOfLines,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ListAccessLevel",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "None",
      UserPin = false,
      Count = NumberOfLines,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ListCreated",
      ControlType = "Indicator",
      IndicatorType = "Text",
      PinStyle = "None",
      UserPin = false,
      Count = NumberOfLines,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "ListSelect",
      ControlType = "Button",
      ButtonType = "Trigger",
      PinStyle = "None",
      UserPin = false,
      Count = NumberOfLines,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "TSC_Name",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = NumerOfInterfaces > 1 and NumerOfInterfaces or 2,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "TSC_Sensor",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = NumerOfInterfaces > 1 and NumerOfInterfaces or 2,
    }
  )
  table.insert(
    ctrls,
    {
      Name = "TSC_Status",
      ControlType = "Text",
      PinStyle = "Both",
      UserPin = true,
      Count = NumerOfInterfaces > 1 and NumerOfInterfaces or 2,
    }
  )
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  -- layout["code"] = {PrettyName = "Code",Style = "None"}
  
  local DefaultControlHeight = 24
  
  local CurrentPageIndex = props["page_index"].Value
  local NumerOfInterfaces = props["Number Of Interfaces"].Value
  
  if CurrentPageIndex == 1 then
    layout["RefreshList"] = {
      Style = "Button",
      ButtonStyle = "Trigger",
      Size = {50,50},
      Position = {500, 30}, 
    }
    layout["EnableListDelete"] = {
      Style = "Button",
      ButtonStyle = "Toggle",
      Legend = "Enable\rDelete",
      Size = {50,50},
      Position = {500, 90},
    }
    layout["ListScroll"] = {
      Style = "Fader",
      Position = {10,10 + DefaultControlHeight},
      Size = {20, (NumberOfLines * DefaultControlHeight)},
    }
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "User Name",
        Position = {40, 10},
        Size = {100, DefaultControlHeight},
      }
    )
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Tag UID",
        Position = {140, 10},
        Size = {100, DefaultControlHeight},
      }
    )
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Created",
        Position = {240, 10},
        Size = {150, DefaultControlHeight},
      }
    )
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Access Level",
        Position = {390, 10},
        Size = {75, DefaultControlHeight},
      }
    )
    for i = 1, NumberOfLines do
      layout["ListName "..i] = {
        Style = "Text",
        Size = {100, DefaultControlHeight},
        Position = {40, 10 + (i) * DefaultControlHeight}, 
        HTextAlign = "Right",
        Padding = 5
      }
      layout["ListUID "..i] = {
        Style = "Text",
        Size = {100, DefaultControlHeight},
        Position = {140, 10 + (i) * DefaultControlHeight}, 
        HTextAlign = "Right",
        Padding = 5
      }
      layout["ListCreated "..i] = {
        Style = "Text",
        Size = {150, DefaultControlHeight},
        Position = {240, 10 + (i) * DefaultControlHeight}, 
        HTextAlign = "Right",
        Padding = 5
      }
      layout["ListAccessLevel "..i] = {
        Style = "Text",
        Size = {75, DefaultControlHeight},
        Position = {390, 10 + (i) * DefaultControlHeight}, 
        HTextAlign = "Right",
        Padding = 5
      }
      layout["ListDelete "..i] = {
        Style = "Button",
        ButtonStyle = "Trigger",
        Size = {DefaultControlHeight, DefaultControlHeight},
        Position = {470, 10 + (i) * DefaultControlHeight}, 
        margin = 0,
        Padding = 0,
      }
    end
  elseif CurrentPageIndex == 2 then --UserModification
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Learing Panel",
        Position = {10, 10},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["LearningPanel"] = {
      Style = "ComboBox",
      Size = {100, DefaultControlHeight},
      Position = {110, 10}, 
    }
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Learning Mode",
        Position = {10, 40},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["LearningMode"] = {
      Style = "ComboBox",
      Size = {100, DefaultControlHeight},
      Position = {110, 40}, 
    }
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Access Level",
        Position = {10, 70},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["AccessLevel"] = {
      Style = "ComboBox",
      Size = {100, DefaultControlHeight},
      Position = {110, 70}, 
    }
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "User Name",
        Position = {10, 100},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["UserName"] = {
      Style = "Text",
      Size = {100, DefaultControlHeight},
      Position = {110, 100}, 
    }
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "UID",
        Position = {10, 130},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["UID"] = {
      Style = "Text",
      Size = {100, DefaultControlHeight},
      Position = {110, 130}, 
    }
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Backup Pin",
        Position = {10, 160},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["BackupPin"] = {
      Style = "Text",
      Size = {100, DefaultControlHeight},
      Position = {110, 160}, 
    }
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "Created",
        Position = {10, 190},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["Created"] = {
      Style = "Text",
      Size = {200, DefaultControlHeight},
      Position = {110, 190}, 
    }
    table.insert(
      graphics,
      {
        Type = "Label",
        Text = "History",
        Position = {10, 220},
        Size = {100, DefaultControlHeight},
      }
    )
    layout["History"] = {
      Style = "Text",
      Size = {200, DefaultControlHeight*10},
      Position = {110, 220}, 
    }
  
  
  elseif CurrentPageIndex == 3 then --Interfaces
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "TSC Name",
        Position = {10, 10},
        Size = {100, DefaultControlHeight},
      }
    )
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Sernsor",
        Position = {110, 10},
        Size = {200, DefaultControlHeight},
      }
    )
    table.insert(
      graphics,
      {
        Type = "Header",
        Text = "Status",
        Position = {310, 10},
        Size = {200, DefaultControlHeight},
      }
    )
    for i = 1, NumerOfInterfaces do
      layout["TSC_Name "..i] = {
        Style = "ComboBox",
        Size = {100, DefaultControlHeight},
        Position = {10, 10 + (i) * DefaultControlHeight}, 
      }
      layout["TSC_Sensor "..i] = {
        Style = "ComboBox",
        Size = {200, DefaultControlHeight},
        Position = {110, 10 + (i) * DefaultControlHeight}, 
      }
      layout["TSC_Status "..i] = {
        Style = "ComboBox",
        Size = {200, DefaultControlHeight},
        Position = {310, 10 + (i) * DefaultControlHeight}, 
      }
    end
  
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  rapidjson = require("rapidjson")
  
  local DatabaseDir = "media/NfcTags.json"
  local Database = rapidjson.decode('{"Tags": []"}')
  local BaseTag = {
    ["UID"] = "",
    ["AccessLevel"] = 0, -- 0=User, 1=Admin, 2=SuperAdmin
    ["UserName"] = "",
    ["Created"] = "",
    ["PIN"] = 123456, -- 4-12 digits
    ["History"] = {
      ["Time"] = os.time(),
      ["Location"] = ""
    }
  }
  local ClearTime = 3
  
  -- local TouchScreens = {
  --   {
  --     ["TSC_Name"] = "TscG310-Reception", ["Sensor"] = Component.New("Sensors_TscG310-Reception"), ["UCI"] = "Reception"
  --   },
  --   {
  --     ["TSC_Name"] = "TSCG35-1", ["Sensor"] = Component.New("Sensors_TscG35-1"), ["UCI"] = "BallroomA"
  --   },
  --   {
  --     ["TSC_Name"] = "TSCG35-2", ["Sensor"] = Component.New("Sensors_TscG35-2"), ["UCI"] = "BallroomB"
  --   },
  -- }
  
  local PanelChoices = {"Off"}
  local ModeChoices = {"Off", "Read", "Add", "Remove"}
  local AccessLevelChoices = {"User", "Admin"}
  local Sensors = {}
  local StatusBlocks = {}
  Controls.LearningMode.Choices = ModeChoices
  Controls.LearningMode.String = ModeChoices[1]
  Controls.AccessLevel.Choices = AccessLevelChoices
  Controls.AccessLevel.String = AccessLevelChoices[1]
  Controls.LearningPanel.String = PanelChoices[1]
  
  function GetSensors()
    Sensors = {}
    local Choices = {}
    for _, comp in pairs(Component.GetComponents()) do
      if comp.Type == "touchscreen_sensors" then
        Sensors[comp.Name] = comp
        table.insert(Choices, comp.Name)
      end
    end
    for _, ctrl in ipairs(Controls.TSC_Sensor) do
      ctrl.Choices = Choices
    end
  end
  function GetStatus()
    StatusBlocks = {}
    local Choices = {}
    for _, comp in pairs(Component.GetComponents()) do
      if comp.Type == "touch_screen_status" then
        StatusBlocks[comp.Name] = comp
        table.insert(Choices, comp.Name)
      end
    end
    for _, ctrl in ipairs(Controls.TSC_Status) do
      ctrl.Choices = Choices
    end
  end
  function GetTscPanels()
    local Choices = {}
    for _, device in pairs(Design.GetInventory()) do
      if device.Model:match("TSC%-%d+%-G3") then
        table.insert(Choices, device.Name)
      end
    end
    for _, ctrl in ipairs(Controls.TSC_Name) do
      ctrl.Choices = Choices
    end
  end
  
  function SetupSensors()
    local LearningChoices = {"Off"}
    for i = 1, #Controls.TSC_Name do
      local name = Controls.TSC_Name[i].String
      local Sensor = Component.New(Controls.TSC_Sensor[i].String)
      local Status = Component.New(Controls.TSC_Status[i].String)
      if name ~= "" and Sensor["nfc.clear"] ~= nil and Status["current.uci"] ~= nil then
        print(
          "Setting up " .. name .. " with " .. Controls.TSC_Sensor[i].String .. " and " .. Controls.TSC_Status[i].String
        )
        table.insert(LearningChoices, name)
        Sensor["nfc.clear"]:Trigger()
        Sensor["nfc.uid"].EventHandler = function(ctrl)
          if ctrl.String ~= "" then
            local UID = ctrl.String
            print(name .. ": " .. UID)
            if name == Controls.LearningPanel.String then 
              ProcessTag(UID)
            else 
              accessLevel, username = CheckTag(UID,name)
              Login(accessLevel,username,Status["current.uci"].String)
            end 
            Sensor["nfc.clear"]:Trigger()
          end
        end
      end
    end
    Controls.LearningPanel.Choices = LearningChoices
  end
  
  function LoadDatabase()
    if not System.IsEmulating then
      print("Checking for Tag Database")
      if
        pcall(
          function()
            Database = rapidjson.load(DatabaseDir)
          end
        )
       then
        -- print(rapidjson.encode(Database))
        print(#Database.Tags .. " Tags in Database")
      else
        print("Error loading database")
        Database = {}
      end
    end
  end
  function ProcessTag(UID)
    local mode = Controls.LearningMode.String
  
    if mode == "Read" then
      local _, _, tag = CheckTag(UID)
      if tag then
        Controls.UserName.String = tag.UserName
        Controls.AccessLevel.String = (tag.AccessLevel == 0 and "User" or "Admin")
        Controls.UID.String = tag.UID
        Controls.BackupPin.String = tag.PIN or ""
        Controls.Created.String = os.date("%e %b %Y %H:%M:%S%p", tag.Created)
        local history = ""
        for _, log in ipairs(tag.History) do
          history = history .. log.Location .. ": " .. os.date("%e %b %Y %H:%M:%S%p", log.Time) .. "\n"
        end
        Controls.History.String = history
      end
    elseif mode == "Add" then
      AddTag(
        UID,
        (Controls.AccessLevel.String == "Admin" and 1 or 0),
        Controls.UserName.String,
        tonumber(Controls.BackupPin.String)
      )
      ResetControls()
      Controls.LearningMode.String = "Off"
    elseif mode == "Remove" then
      RemoveTag(UID)
      ResetControls()
      Controls.LearningMode.String = "Off"
    end
  end
  
  function AddTag(UID, accessLevel, userName, backupPin)
    if UID then
      local accessLevel = accessLevel or 0
      local userName = userName or "TAG:" .. UID
      local created = os.time()
      local backupPin = backupPin or ""
      table.insert(
        Database.Tags,
        {
          ["UID"] = UID,
          ["AccessLevel"] = accessLevel, -- 0=User, 1=Admin, 2=SuperAdmin
          ["UserName"] = userName,
          ["Created"] = created,
          ["PIN"] = backupPin,
          ["History"] = {}
        }
      )
      rapidjson.dump(Database, DatabaseDir)
      RefreshList()
    else
      print("Error, Cant add tag without UID")
    end
  end
  
  function RemoveTag(UID)
    for i, tag in ipairs(Database.Tags) do
      if tag.UID == UID then
        table.remove(Database.Tags, i)
        rapidjson.dump(Database, DatabaseDir)
        RefreshList()
        return true
      end
    end
    return false
  end
  function CheckTag(UID, location)
    for i, tag in ipairs(Database.Tags) do
      if tag.UID == tostring(UID) then
        if location then -- add history when used
          table.insert(tag.History, 1, {["Time"] = os.time(), ["Location"] = location})
          while (#tag.History > Controls.HistoryLength.Value) do
            table.remove(tag.History)
          end
          rapidjson.dump(Database, DatabaseDir)
        end
        return tag.AccessLevel, tag.UserName, tag
      end
    end
    return -1, "Unknown Tag"
  end
  
  function Login(accessLevel,name,uci)
    print("Login",accessLevel,name,uci)
    local name = name or ""
    if uci ~= nil then 
      if accessLevel >= 0 then --valid user
        Uci.SetVariable(uci,"Admin",accessLevel >= 1)
        Uci.SetVariable(uci,"Locked",false)
        Uci.SetVariable(uci,"UserName",'"'..name..'"')
      else 
        print("Invalid Login:",name)
      end 
    end 
  end 
  
  function RefreshList()
    if Database.Tags and #Database.Tags <= NumberOfLines then
      Controls.ListScroll.IsInvisible = true
      for i,user in ipairs(Database.Tags) do
        print(user.UserName,user.UID,os.date("%e %b %Y %H:%M:%S%p", user.Created))
        Controls["ListName"][i].String = user.UserName
        Controls["ListUID"][i].String = user.UID
        Controls["ListCreated"][i].String = os.date("%e %b %Y %H:%M:%S%p", user.Created)
        Controls["ListAccessLevel"][i].String = AccessLevelChoices[user.AccessLevel + 1]
      end
    else
      Controls.ListScroll.IsInvisible = false
      local scroll = 100 - Controls.ListScroll.Value
      local clicks = #Database.Tags - NumberOfLines + 1
      local scrollSize = 100 / clicks
      local start = scroll ~= 100 and math.floor(scroll / scrollSize) or clicks - 1
      print("Scroll", scroll, clicks, scrollSize,start)
      for i = 1, NumberOfLines do
        local user = Database.Tags[start + i]
        Controls["ListName"][i].String = user.UserName
        Controls["ListUID"][i].String = user.UID
        Controls["ListCreated"][i].String = os.date("%e %b %Y %H:%M:%S%p", user.Created)
        Controls["ListAccessLevel"][i].String = AccessLevelChoices[user.AccessLevel + 1]
      end
    end
  end
  
  function ResetControls()
    -- Controls.Created.IsInvisible = Controls.LearningMode.String ~= "Read"
    -- Controls.History.IsInvisible = Controls.LearningMode.String ~= "Read"
    Controls.UserName.String = ""
    Controls.UID.String = ""
    Controls.BackupPin.String = ""
    Controls.Created.String = ""
    Controls.History.String = ""
    Controls.ListScroll.Value = 100
  end
  function Initialize()
    GetTscPanels()
    GetSensors()
    GetStatus()
  
    ResetControls()
    LoadDatabase()
    RefreshList()
    SetupSensors()
  end
  
  for _, ctrl in ipairs(Controls.TSC_Name) do
    ctrl.EventHandler = SetupSensors
  end
  for _, ctrl in ipairs(Controls.TSC_Sensor) do
    ctrl.EventHandler = SetupSensors
  end
  for _, ctrl in ipairs(Controls.TSC_Status) do
    ctrl.EventHandler = SetupSensors
  end
  Controls.RefreshList.EventHandler = RefreshList
  Controls.ListScroll.EventHandler = RefreshList
  
  Initialize()
end
